name: CI/CD Pipeline for Flask Application

on:
  push:
    branches:
      - main  # Trigger the workflow when changes are pushed to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # Run the job on an Ubuntu-based runner

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Adjust based on your project requirements

    # Step 3: Install dependencies from requirements.txt
    - name: Install dependencies
      run: |
        pip install -r requirements.txt  # Install required dependencies from requirements.txt
        pip install pylint bandit  # Install Pylint and Bandit for code analysis

    # Step 4: Run Pylint on specific Python files (app.py, models.py, forms.py)
    - name: Run Pylint on app.py, models.py, and forms.py
      run: |
        pylint app.py models.py forms.py --output-format=text > pylint-report.txt || true
        cat pylint-report.txt  # Display the Pylint report

    # Step 5: Run Bandit for security analysis on specific files
    - name: Run Bandit on app.py, models.py, and forms.py
      run: |
        bandit -r app.py models.py forms.py -f json -o bandit-report.json
        cat bandit-report.json  # Display the Bandit security analysis report

    # Step 6: Build Docker image with no cache
    - name: Build Docker image
      run: |
        docker build --no-cache -t vishal09be/m_mpharmacy:latest .

    # Step 7: Push the Docker image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker push vishal09be/m_mpharmacy:latest

    # Step 8: Deploy to EC2 instance using SSH
    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_IP }}  # EC2 public IP address from secrets
        username: ${{ secrets.EC2_USER }}  # EC2 username (typically 'ec2-user' for Amazon Linux)
        key: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 private key (stored as GitHub Secret)
        script: |
          # Stop and remove the old container if it exists
          docker stop m_mpharmacy || true
          docker rm m_mpharmacy || true

          # Pull the latest Docker image from Docker Hub
          docker pull vishal09be/m_mpharmacy:latest

          # Run the new container on port 5000
          docker run -d --name m_mpharmacy -p 5000:5000 vishal09be/m_mpharmacy:latest
